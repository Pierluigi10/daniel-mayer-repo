---
import { getLangFromUrl, useTranslations } from "../utils/i18n";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<section
  id="contact"
  class="py-20"
  style="background: var(--color-background);"
>
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="text-center mb-16">
      <h2 class="text-4xl font-bold mb-4" style="color: var(--color-primary);">
        {t("contact.title")}
      </h2>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        {t("contact.subtitle")}
      </p>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-start">
      <!-- Left Column - Contact Info -->
      <div class="space-y-8">
        <!-- Email Card -->
        <div
          class="bg-white p-8 rounded-xl shadow-lg border hover:shadow-xl transition-shadow"
        >
          <div class="flex items-start space-x-6">
            <div
              class="flex items-center justify-center w-16 h-16 rounded-xl text-white flex-shrink-0"
              style="background: var(--color-primary);"
            >
              <svg
                class="w-8 h-8"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                aria-hidden="true"
              >
                <path d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8"></path>
                <path
                  d="M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                ></path>
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-semibold text-gray-900 mb-2">
                {t("contact.email")}
              </h3>
              <a
                href="mailto:info@tax-meyer.de"
                class="text-lg hover:underline transition-colors"
                style="color: var(--color-primary);"
              >
                info@tax-meyer.de
              </a>
              <p class="text-gray-600 mt-2">{t("contact.email.response")}</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Right Column - Appointment -->
      <div class="bg-white p-10 rounded-xl shadow-xl border">
        <div class="text-center mb-8">
          <div
            class="flex items-center justify-center w-20 h-20 rounded-full mx-auto mb-6"
            style="background: var(--color-primary-lighter);"
          >
            <svg
              class="w-10 h-10"
              style="color: var(--color-primary);"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              aria-hidden="true"
            >
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
              <line x1="16" y1="2" x2="16" y2="6"></line>
              <line x1="8" y1="2" x2="8" y2="6"></line>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
          </div>
          <h3 class="text-2xl font-bold text-gray-900 mb-4">
            {t("contact.appointment")}
          </h3>
          <p class="text-gray-600 mb-8">
            {t("contact.appointment.description")}
          </p>
        </div>

        <button
          id="calendly-button"
          class="w-full py-4 px-6 rounded-lg text-white font-semibold text-lg bg-primary hover:bg-primary-lite cursor-pointer shadow-lg hover:shadow-lg transition-all duration-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-primary/60"
          type="button"
          aria-expanded="false"
          aria-controls="calendly-embed"
          data-book-text={t("contact.button.book")}
          data-close-text={t("contact.button.close")}
        >
          <svg
            class="w-5 h-5 inline-block mr-2 align-[-2px]"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            aria-hidden="true"
          >
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
          {t("contact.appointment.button")}
        </button>

        <div id="calendly-embed" class="mt-8 hidden">
          <div class="border rounded-lg overflow-hidden">
            <div
              class="calendly-inline-widget"
              data-url="https://calendly.com/kanzlei-wp-meyer"
              style="min-width:320px; height:630px; width:100%;"
            >
            </div>
          </div>
        </div>

        <div class="mt-8 pt-8 border-t border-gray-100">
          <div
            class="flex items-center justify-center space-x-6 text-sm text-gray-500"
          >
            <div class="flex items-center">
              <svg
                class="w-4 h-4 mr-1"
                style="color: var(--color-accent);"
                viewBox="0 0 24 24"
                fill="currentColor"
                aria-hidden="true"
              >
                <path
                  d="M12 2L13.09 8.26L22 9L13.09 9.74L12 16L10.91 9.74L2 9L10.91 8.26L12 2Z"
                ></path>
              </svg>
              {t("contact.trust.consultation")}
            </div>
            <div class="flex items-center">
              <svg
                class="w-4 h-4 mr-1"
                style="color: var(--color-accent);"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                aria-hidden="true"
              >
                <polyline points="20 6 9 17 4 12"></polyline>
              </svg>
              {t("contact.trust.waiting")}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const btn = document.getElementById("calendly-button");
    if (!(btn instanceof HTMLButtonElement)) return; // type guard

    const panel = document.getElementById("calendly-embed");
    if (!(panel instanceof HTMLDivElement)) return; // type guard

    const bookText = btn.getAttribute("data-book-text") || "Termin buchen";
    const closeText =
      btn.getAttribute("data-close-text") || "Kalender schlie√üen";

    const openIcon = `
      <svg class="w-5 h-5 inline-block mr-2 align-[-2px]" viewBox="0 0 24 24"
        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
        stroke-linejoin="round" aria-hidden="true">
        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
        <line x1="16" y1="2" x2="16" y2="6"></line>
        <line x1="8" y1="2" x2="8" y2="6"></line>
        <line x1="3" y1="10" x2="21" y2="10"></line>
      </svg>`;

    const closeIcon = `
      <svg class="w-5 h-5 inline-block mr-2 align-[-2px)" viewBox="0 0 24 24"
        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
        stroke-linejoin="round" aria-hidden="true">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>`;

    /** @param {boolean} open @param {HTMLButtonElement} el @param {HTMLDivElement} panelEl */
    function setButtonState(
      open: boolean,
      el: HTMLButtonElement,
      panelEl: HTMLDivElement
    ) {
      el.setAttribute("aria-expanded", String(open));
      if (open) {
        panelEl.classList.remove("hidden");
        el.innerHTML = `${closeIcon}${closeText}`;

        if (!document.querySelector('script[src*="calendly"]')) {
          const script = document.createElement("script");
          script.src = "https://assets.calendly.com/assets/external/widget.js";
          script.async = true;
          document.head.appendChild(script);
        }
      } else {
        panelEl.classList.add("hidden");
        el.innerHTML = `${openIcon}${bookText}`;
      }
    }

    btn.addEventListener("click", () => {
      const willOpen = panel.classList.contains("hidden");
      setButtonState(willOpen, btn, panel);
    });

    // Stato iniziale
    setButtonState(false, btn, panel);
  });
</script>
